#!/usr/bin/env sh

# Looks at the passed in environment variable and maybe resolve a separate environment variable at runtime
#
# @param string $envString
#
# @return string maybe resolved environment variable
maybe_resolve_env_from_env () {
  RESOLVED_ENVIRONMENT_VALUE=$(printenv -- "$1")

  case "${RESOLVED_ENVIRONMENT_VALUE}" in
      # Check for a sub resolution
      "__RESOLVE::"*)
        SUB=$(echo "${RESOLVED_ENVIRONMENT_VALUE}" | sed -e "s/__RESOLVE:://g")

        # Time to recur in!
        maybe_resolve_env_from_env "${SUB}" ;;

      # DEFAULT: Just return the environment variable if it matched nothing above
      *)
        echo "${RESOLVED_ENVIRONMENT_VALUE}" ;;
    esac
}

# Prep our local disk for the next several steps
mkdir -pv /srv/mammoth/plugins
mkdir -pv /srv/mammoth/world
mkdir -pv /srv/mammoth/world_nether
mkdir -pv /srv/mammoth/world_the_end

# Before we generate our config, set the disc up properly
# Time to maybe do runtime installation, since PV claim environments will re-use the main minecraft directory for speed on deployments
if [ ! -f /srv/minecraft/paper.jar ]; then
  # TODO: We MUST replace this with a resolver for the latest paper build for the passed in Minecraft version by environment
  wget -O /srv/minecraft/paper.jar "https://papermc.io/api/v2/projects/paper/versions/1.17.1/builds/281/downloads/paper-1.17.1-281.jar"
fi

# Accept the EULA...because the server won't start if we don't
if [ ! -f /srv/minecraft/eula.txt ]; then
  echo "eula=true" > /srv/minecraft/eula.txt
fi

# Alright check for, and maybe symlink the plugins folder to our local one
if [ ! -L /srv/minecraft/plugins ]; then
  echo "Creating symlink to local minecraft plugins location"

  ln -s /srv/mammoth/plugins /srv/minecraft/plugins
fi

# And make sure we make a symlink for the worlds to a local disc world.  Mammoth servers can run in isolation, so their worlds sync through the plugin
# TODO: We should probably take a look at the best way to resolve these ahead of time, or pull them into the default world folder instead of possible to make things a bit more tolerant of newly added dimensions if that is applicable here
if [ ! -L /srv/minecraft/world ]; then
  echo "Creating symlink to local minecraft base world location"

  ln -s /srv/mammoth/world /srv/minecraft/world
fi

if [ ! -L /srv/minecraft/world_nether ]; then
  echo "Creating symlink to local minecraft nether world location"

  ln -s /srv/mammoth/world_nether /srv/minecraft/world_nether
fi

if [ ! -L /srv/minecraft/world_the_end ]; then
  echo "Creating symlink to local minecraft end world location"

  ln -s /srv/mammoth/world_the_end /srv/minecraft/world_the_end
fi

# Lastly, if we don't have a version of the client plugin, fetch one
if [ ! -f /srv/mammoth/plugins/WorldQLClient.jar ]; then
  # TODO: Either a golden image provides this as an env var for us, or we need to resolve the release.  Until either one of those is available, this is hard-coded
  wget -O /srv/mammoth/plugins/WorldQLClient.jar https://github.com/WorldQL/mammoth/releases/download/v0.02-alpha/WorldQLClient-1.0-SNAPSHOT.jar
fi

# The config lives within the plugins dir, so make sure its parent exists too!
mkdir -pv /srv/mammoth/plugins/WorldQLClient

ConfigFile="/srv/mammoth/plugins/WorldQLClient/config.yml"

# Delete any config we might already have, as we will be treating it as bad during a rebuild
touch "${ConfigFile}"
truncate -s 0 "${ConfigFile}"

echo "Generating WorldQL config file"

echo "# WorldQL Connection Details" >> "${ConfigFile}"
echo "# Generated by Docker build scripts on [$(date)]" >> "${ConfigFile}"

# Go over our primary variables that will be used during the construction of the config file and assign defaults if values are missing
if [ -n "${WQL_CONTROL_PLANE_HOST}" ] || [ -n "${WQL_CONTROL_PLANE_HANDSHAKE_PORT}" ] || [ -n "${WQL_CONTROL_PLANE_PUSH_PORT}" ]; then
  # Make sure we write the config header
  echo "worldql:" >> "${ConfigFile}"

  # And write only what has a value
  if [ -n "${WQL_CONTROL_PLANE_HOST}" ]; then
    echo "  host: \"$(maybe_resolve_env_from_env "WQL_CONTROL_PLANE_HOST")\"" >> "${ConfigFile}"
  fi

  if [ -n "${WQL_CONTROL_PLANE_HANDSHAKE_PORT}" ]; then
    echo "  handshake-port: \"$(maybe_resolve_env_from_env "WQL_CONTROL_PLANE_HANDSHAKE_PORT")\"" >> "${ConfigFile}"
  fi

  if [ -n "${WQL_CONTROL_PLANE_PUSH_PORT}" ]; then
    echo "  push-port: \"$(maybe_resolve_env_from_env "WQL_CONTROL_PLANE_PUSH_PORT")\"" >> "${ConfigFile}"
  fi
fi

if [ -n "${WQL_SELF_IDENT_HOST}" ]; then
  if [ -n "${WQL_CONTROL_PLANE_HOST}" ] || [ -n "${WQL_CONTROL_PLANE_HANDSHAKE_PORT}" ] || [ -n "${WQL_CONTROL_PLANE_PUSH_PORT}" ]; then
    # Put a newline in here
    echo "" >> "${ConfigFile}"
  fi

  echo "# Client (self) Hostname" >> "${ConfigFile}"
  echo "host: \"$(maybe_resolve_env_from_env "WQL_SELF_IDENT_HOST")\"" >> "${ConfigFile}"
fi

# Echo out the config file so that the build log has a record of it
echo "WorldQL configuration file generates with the following content:"
echo "----------------------------"
cat ${ConfigFile}
echo "----------------------------"
